apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-task
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: apikey
      description: the ibmcloud api key
    - name: acc-region
      description: Account region
    - name: workspace-name
      description: Workspace name
  workspaces:
    - name: artifacts
      mountPath: /artifacts
  steps:
    - name: create-workspace
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBM_CLOUD_API
          value: $(params.ibmcloud-api)
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -x
          echo "Login to ibm cloud..................."
          ERR_NUM=0
          #echo "Workspace name: $WORKSPACE_NAME"
          # force login (required by schematics cli)
          ibmcloud login --apikey $(params.apikey) -a "$(params.ibmcloud-api)" -r $(params.acc-region)

          # Output in json format
          #ibmcloud schematics version --output json

          # To find the ID of your workspace
          # ibmcloud schematics workspace list
          WORKSPACE_LIST=$(ibmcloud schematics workspace list --json) 

          for var in WORKSPACE_LIST
          do
            echo "list data: $var"
          done

          exit 5
          echo "Workspace list: $WORKSPACE_LIST"
          # Get details of a workspace
          # ibmcloud schematics workspace action --id <workspace-id>
          # https://github.com/rajeev159/terraform-provider-ibm/blob/master/examples/workspace.json
          
          echo "Creating workspace....................."
          curl -LJO https://raw.githubusercontent.com/rajeev159/terraform-provider-ibm/master/examples/workspace.json
          ((ERR_NUM=ERR_NUM+$?))
          WORKSPACE=$(ibmcloud schematics workspace new --file workspace.json --json) 
          ((ERR_NUM=ERR_NUM+$?))
          WORKSPACE_ID=$(echo $WORKSPACE | jq ".id" | sed 's/"//g')
          echo "WORKSPACE ID:  $WORKSPACE_ID"
          if [ $ERR_NUM -ne 0 ]; then
            echo "Error in creating workspace........................"
            exit $ERR_NUM
          else
            echo "Workspace created with id: $WORKSPACE_ID"
          fi
          sleep 50

          echo "Creating Plan....................."
          # run terraform plan
          echo "ibmcloud terraform plan --id $WORKSPACE_ID"
          ACTIVITY=$(ibmcloud terraform plan -id $WORKSPACE_ID --json)
          ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
          echo "Activity ID   $ACTIVITY_ID"
          # poll until status is no longer INPROGRESS, or if there is an error
          while :
          do
            STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS
              exit $RET_VAL
            else
              STATUS_VALUE=$(echo $STATUS | jq -r ".status")
              echo "Polling for status: $STATUS_VALUE"
              if [ "$STATUS_VALUE" = "FAILED" ]; then 
                ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
                exit 1
              elif [ "$STATUS_VALUE" != "INPROGRESS" ] && [ "$STATUS_VALUE" != "CREATED" ]; then  
                break
              fi
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5
          done
          ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
          sleep 50

          echo "Applying Plan....................."
          # run terraform apply
          echo "ibmcloud terraform apply --id $WORKSPACE_ID --force"
          ACTIVITY2=$(ibmcloud terraform apply -id $WORKSPACE_ID --json --force)
          ACTIVITY2_ID=$(echo $ACTIVITY | jq -r ".activityid")
          echo "Activity ID   $ACTIVITY2_ID"
          # poll until status is no longer INPROGRESS, or if there is an error
          while :
          do
            STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY2_ID --json)
            
            RET_VAL=$?
            if [ $RET_VAL -ne 0 ]; then
              echo $STATUS
              exit $RET_VAL
            else
              STATUS_VALUE=$(echo $STATUS | jq -r ".status")
              echo "Polling for status: $STATUS_VALUE"
              if [ "$STATUS_VALUE" = "FAILED" ]; then
                ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY2_ID
                exit 1
              elif [ "$STATUS_VALUE" != "INPROGRESS" ]; then  
                break
              fi
            fi
            # sleep for 5 seconds, while waiting for completion
            sleep 5

          echo 'Pland is ending here............................'
          done
          ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY2_ID
          


